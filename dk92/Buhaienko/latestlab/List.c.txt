#include <stdlib.h>
#include <stdio.h>
#include "List.h"

IntNode *MakeNodeint(int aValue)
{
  IntNode *theResult = (IntNode *)malloc(sizeof(IntNode));

  theResult->value = aValue;
  theResult->nextNode = NULL;

  return theResult;
}

void FreeIntNode(IntNode *aNode)
{
  if (NULL != aNode)
  {
    free(aNode);
  }
}

IntList *MakeList()
{
  IntList *theList = (IntList *)malloc(sizeof(IntList));

  theList->head = NULL;
  theList->tail = NULL;
  theList->count = 0;

  return theList;
}
 //                              function of fscanf here
IntNode *AddNode(IntList *aList, IntNode *aNewNode)
{

  if (NULL == aList || NULL == aNewNode)
  {
    return NULL;
  }


  if (NULL == aList->head && NULL == aList->tail)
  {

    aList->head = aList->tail = aNewNode;
  }
  else
  {
    IntNode *theTail = aList->tail;
    aList->tail = aNewNode;

    if (NULL != theTail)
    {
      theTail->nextNode = aList->tail;
    }
  }

  aList->count += 1;

  return aNewNode;
}
 //                                        here an iteration for comparing
IntNode *NodeAtIndex(const IntList *aList, int anIndex)
{
  IntNode *theResult = NULL;

  if (NULL != aList && anIndex < aList->count)
  {
    int i = 0;
    IntNode *theNode = aList->head;

    do
    {
      if (i == anIndex) //<!- index was found
      {
        theResult = theNode; //<! - our node
        break;
      }

      i++; // increase index
      theNode = theNode->nextNode; //<! - go to next node

    } while (NULL != theNode);
  }

  void FreeList(IntList *aList)
{

  if (NULL == aList)
  {
    return;
  }

  IntNode *theNode = aList->head;

  while (NULL != theNode)
  {
    IntNode *theNodeToBeFree = theNode;
    theNode = theNode->nextNode;

    FreeIntNode(theNodeToBeFree);
  }

  free(aList);
}
  return theResult;
}

int CountList(const IntList *aList)
{
  int theResult = -1;

  if (NULL != aList)
  {
    theResult = aList->count;
  }

  return theResult;
}
